'''
Business: –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –ø–∞—Ä–∏–Ω–≥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å—É–¥–µ–π —Ç—É—Ä–Ω–∏—Ä–∞)
Args: event - dict —Å httpMethod, queryStringParameters (id) –∏–ª–∏ body (tournament_id), headers (X-User-Id)
      context - object —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ request_id, function_name
Returns: HTTP response dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏—è
'''

import json
import os
import psycopg2
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    print(f'üîç DELETE tournament request: method={method}')
    print(f'üìã Headers: {event.get("headers", {})}')
    print(f'üìã Query params: {event.get("queryStringParameters", {})}')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'DELETE, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id, X-Auth-Token',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'DELETE':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    headers = event.get('headers', {})
    user_id = headers.get('x-user-id') or headers.get('X-User-Id')
    
    print(f'üë§ User ID from headers: {user_id}')
    
    if not user_id:
        return {
            'statusCode': 401,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'Unauthorized'})
        }
    
    # –ü–æ–ª—É—á–∞–µ–º tournament_id –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ body
    query_params = event.get('queryStringParameters', {}) or {}
    tournament_id = query_params.get('id')
    
    if not tournament_id:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ body
        body_str = event.get('body', '{}')
        if body_str:
            body_data = json.loads(body_str)
            tournament_id = body_data.get('tournament_id')
    
    if not tournament_id:
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'tournament_id is required'})
        }
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    dsn = os.environ.get('DATABASE_URL')
    conn = psycopg2.connect(dsn)
    cur = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ —Å—É–¥—å—è —Ç—É—Ä–Ω–∏—Ä–∞)
    cur.execute(
        f"SELECT role FROM t_p79348767_tournament_site_buil.users WHERE id = {user_id}"
    )
    result = cur.fetchone()
    
    if not result:
        cur.close()
        conn.close()
        return {
            'statusCode': 403,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'User not found'})
        }
    
    user_role = result[0]
    
    # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—É–¥—å—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    if user_role != 'admin':
        cur.execute(
            f"SELECT judge_id FROM t_p79348767_tournament_site_buil.tournaments WHERE id = {tournament_id}"
        )
        tournament_result = cur.fetchone()
        
        if not tournament_result or tournament_result[0] != int(user_id):
            cur.close()
            conn.close()
            return {
                'statusCode': 403,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'isBase64Encoded': False,
                'body': json.dumps({'error': 'Only tournament judge or administrator can delete this tournament'})
            }
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    cur.execute(
        f"DELETE FROM t_p79348767_tournament_site_buil.tournament_results WHERE tournament_id = {tournament_id}"
    )
    print(f'‚úÖ Deleted tournament_results for tournament {tournament_id}')
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∏–Ω–≥–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    cur.execute(
        f"DELETE FROM t_p79348767_tournament_site_buil.games WHERE tournament_id = {tournament_id}"
    )
    print(f'‚úÖ Deleted games for tournament {tournament_id}')
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    cur.execute(
        f"DELETE FROM t_p79348767_tournament_site_buil.players WHERE tournament_id = {tournament_id}"
    )
    print(f'‚úÖ Deleted players for tournament {tournament_id}')
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    cur.execute(
        f"DELETE FROM t_p79348767_tournament_site_buil.tournaments WHERE id = {tournament_id}"
    )
    print(f'‚úÖ Deleted tournament {tournament_id}')
    
    conn.commit()
    cur.close()
    conn.close()
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'isBase64Encoded': False,
        'body': json.dumps({
            'success': True,
            'message': f'Tournament {tournament_id} and all its games deleted successfully'
        })
    }