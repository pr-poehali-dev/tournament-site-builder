import { Tournament, User } from '@/types';
import { calculateTournamentStandings } from './tournamentHelpers';

export async function saveTournamentResultsToDb(
  tournament: Tournament,
  users: User[],
  authToken: string
): Promise<void> {
  if (!tournament.dbId) {
    console.error('Tournament has no dbId');
    return;
  }

  const standings = calculateTournamentStandings(tournament, users);
  
  const resultsToSave = standings.map((standing, index) => ({
    tournament_id: tournament.dbId,
    player_id: standing.user.id,
    place: index + 1,
    points: standing.points,
    buchholz: standing.buchholz,
    sum_buchholz: standing.sumBuchholz || 0,
    wins: standing.wins,
    losses: standing.losses,
    draws: standing.draws
  }));

  try {
    const response = await fetch('https://functions.poehali.dev/14e205c3-5a13-45c5-a7ab-d2b8ed973b65', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Auth-Token': authToken
      },
      body: JSON.stringify({ results: resultsToSave })
    });

    if (response.ok) {
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
    } else {
      const error = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
    }
  } catch (error) {
    console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞:', error);
  }
}

// Make function available globally with app state access
(window as any).saveTournament26Results = async () => {
  // Get React app root element and try to find the app state
  const appElement = document.querySelector('#root');
  if (!appElement) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç #root');
    return;
  }

  // Access React Fiber to get component instance
  const reactKey = Object.keys(appElement).find(key => 
    key.startsWith('__react') && key.includes('internal')
  );
  
  if (!reactKey) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ React');
    return;
  }

  // Navigate through React Fiber tree to find appState
  const fiber = (appElement as any)[reactKey];
  let appState = null;
  let users = null;
  
  // Search for appState in component tree
  const searchState = (node: any, depth = 0): boolean => {
    if (depth > 50) return false;
    
    if (node?.memoizedProps) {
      if (node.memoizedProps.appState?.tournaments) {
        appState = node.memoizedProps.appState;
        return true;
      }
      if (node.memoizedProps.tournaments && node.memoizedProps.users) {
        users = node.memoizedProps.users;
        appState = { tournaments: node.memoizedProps.tournaments, users: node.memoizedProps.users };
        return true;
      }
    }
    
    if (node?.child && searchState(node.child, depth + 1)) return true;
    if (node?.sibling && searchState(node.sibling, depth + 1)) return true;
    
    return false;
  };
  
  searchState(fiber);
  
  if (!appState || !appState.tournaments) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ appState —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
    console.log('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞ 26 –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞');
    return;
  }
  
  const tournament = appState.tournaments.find((t: any) => t.dbId === 26);
  if (!tournament) {
    console.error('–¢—É—Ä–Ω–∏—Ä 26 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ appState');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:', appState.tournaments.map((t: any) => ({ id: t.id, dbId: t.dbId, name: t.name })));
    return;
  }
  
  const usersData = appState.users || users || [];
  if (usersData.length === 0) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    return;
  }
  
  const authToken = localStorage.getItem('auth_token') || '';
  
  console.log(`üéØ –ù–∞–π–¥–µ–Ω —Ç—É—Ä–Ω–∏—Ä: ${tournament.name}`);
  console.log(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${tournament.participants?.length || 0}`);
  console.log(`üéÆ –†–∞—É–Ω–¥–æ–≤: ${tournament.rounds?.length || 0}`);
  
  await saveTournamentResultsToDb(tournament, usersData, authToken);
};

console.log('üíæ –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ 26 –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\nsaveTournament26Results()');