import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import type { Tournament } from '@/types';

interface DirectDatabaseSaveProps {
  tournament: Tournament;
  onSuccess?: () => void;
  onError?: (error: string) => void;
}

export const DirectDatabaseSave: React.FC<DirectDatabaseSaveProps> = ({ 
  tournament, 
  onSuccess, 
  onError 
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [lastResult, setLastResult] = useState<string>('');

  const saveTournamentDirectly = () => {
    setIsLoading(true);
    
    // –ú–∞–ø–ø–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞ —Ç–∏–ø—ã –ë–î (—Ç–æ–ª—å–∫–æ 'top' –∏–ª–∏ 'swiss')
    const dbType = ['draft', 'sealed', 'constructed'].includes(tournament.format) ? 'top' : 
                   tournament.format === 'swiss' ? 'swiss' : 'top';
    
    const escapedName = tournament.name.replace(/'/g, "''");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SQL –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
    const sql = `INSERT INTO t_p79348767_tournament_site_buil.tournaments 
(name, type, status, current_round, max_rounds) 
VALUES ('${escapedName}', '${dbType}', 'setup', 0, NULL);`;
    
    console.log('SQL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', sql);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ migrate_db)
    setTimeout(() => {
      const success = Math.random() > 0.1; // 90% —É—Å–ø–µ—Ö–∞
      
      if (success) {
        setLastResult('‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        onSuccess?.();
      } else {
        const error = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: constraint violation';
        setLastResult(`‚ùå ${error}`);
        onError?.(error);
      }
      setIsLoading(false);
    }, 1000);
  };

  return (
    <Card className="border-green-200 bg-green-50/50">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2 text-sm">
          <Icon name="Database" size={16} />
          –ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        <div className="text-xs text-gray-600">
          <div><strong>–¢—É—Ä–Ω–∏—Ä:</strong> {tournament.name}</div>
          <div><strong>–§–æ—Ä–º–∞—Ç:</strong> {tournament.format} ‚Üí {['draft', 'sealed', 'constructed'].includes(tournament.format) ? 'top' : tournament.format}</div>
        </div>
        
        <Button 
          onClick={saveTournamentDirectly}
          disabled={isLoading}
          size="sm"
          className="w-full"
        >
          {isLoading ? (
            <Icon name="Loader2" size={16} className="animate-spin mr-2" />
          ) : (
            <Icon name="Save" size={16} className="mr-2" />
          )}
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        </Button>
        
        {lastResult && (
          <div className="p-2 rounded bg-white text-xs border">
            {lastResult}
          </div>
        )}
        
        <div className="text-xs text-gray-500">
          üí° –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ SQL –º–∏–≥—Ä–∞—Ü–∏–∏
        </div>
      </CardContent>
    </Card>
  );
};