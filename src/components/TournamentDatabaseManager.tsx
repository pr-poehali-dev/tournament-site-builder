import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import type { Tournament } from '@/types';

interface TournamentDatabaseManagerProps {
  tournament: Tournament;
  onSuccess?: () => void;
  onError?: (error: string) => void;
}

export const TournamentDatabaseManager: React.FC<TournamentDatabaseManagerProps> = ({ 
  tournament, 
  onSuccess, 
  onError 
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [lastResult, setLastResult] = useState<string>('');

  const saveTournamentToDatabase = async () => {
    setIsLoading(true);
    try {
      // –°–æ–∑–¥–∞—ë–º SQL –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
      const escapedName = tournament.name.replace(/'/g, "''");
      const escapedFormat = tournament.format.replace(/'/g, "''");
      
      const migrationSQL = `
-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞: ${escapedName}
INSERT INTO t_p79348767_tournament_site_buil.tournaments 
(name, type, status, current_round, max_rounds) 
VALUES ('${escapedName}', '${escapedFormat}', 'setup', 0, NULL);
      `;

      console.log('Saving tournament to database:', migrationSQL);
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ migrate_db tool, –Ω–æ –ø–æ–∫–∞ —ç–º—É–ª–∏—Ä—É–µ–º
      const success = Math.random() > 0.3; // 70% —É—Å–ø–µ—Ö–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      
      if (success) {
        setLastResult('‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        onSuccess?.();
      } else {
        throw new Error('–ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      }
      
    } catch (error) {
      const errorMsg = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
      setLastResult(errorMsg);
      onError?.(errorMsg);
    } finally {
      setIsLoading(false);
    }
  };

  const testDatabaseConnection = async () => {
    setIsLoading(true);
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
      const testSQL = `
SELECT COUNT(*) as tournament_count 
FROM t_p79348767_tournament_site_buil.tournaments;
      `;
      
      console.log('Testing database connection:', testSQL);
      
      // –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const success = Math.random() > 0.2; // 80% —É—Å–ø–µ—Ö–∞
      
      if (success) {
        setLastResult('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
      } else {
        throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
      
    } catch (error) {
      setLastResult(`‚ùå ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="border-blue-200">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Icon name="Database" size={20} />
          –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-sm">
          <div><strong>–¢—É—Ä–Ω–∏—Ä:</strong> {tournament.name}</div>
          <div><strong>–§–æ—Ä–º–∞—Ç:</strong> {tournament.format}</div>
          <div><strong>–ì–æ—Ä–æ–¥:</strong> {tournament.city}</div>
          <div><strong>–î–∞—Ç–∞:</strong> {tournament.date}</div>
        </div>
        
        <div className="flex gap-2">
          <Button 
            onClick={testDatabaseConnection}
            disabled={isLoading}
            variant="outline"
            size="sm"
          >
            {isLoading ? (
              <Icon name="Loader2" size={16} className="animate-spin mr-2" />
            ) : (
              <Icon name="Database" size={16} className="mr-2" />
            )}
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î
          </Button>
          
          <Button 
            onClick={saveTournamentToDatabase}
            disabled={isLoading}
            size="sm"
          >
            {isLoading ? (
              <Icon name="Loader2" size={16} className="animate-spin mr-2" />
            ) : (
              <Icon name="Save" size={16} className="mr-2" />
            )}
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
          </Button>
        </div>
        
        {lastResult && (
          <div className="p-3 rounded bg-gray-50 text-sm">
            {lastResult}
          </div>
        )}
        
        <div className="text-xs text-gray-600">
          üí° –¢—É—Ä–Ω–∏—Ä –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
        </div>
      </CardContent>
    </Card>
  );
};